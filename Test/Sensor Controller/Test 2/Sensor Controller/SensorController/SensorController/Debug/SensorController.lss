
SensorController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  0000031a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800206  00800206  000003b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000189f  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001223  00000000  00000000  00001dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000892  00000000  00000000  00002fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00003860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1d  00000000  00000000  00003a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000596  00000000  00000000  00004451  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000049e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	6e c0       	rjmp	.+220    	; 0x1aa <__vector_51>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e1       	ldi	r30, 0x1A	; 26
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	22 d0       	rcall	.+68     	; 0x164 <main>
 120:	fa c0       	rjmp	.+500    	; 0x316 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN17CentralComputerIFC1Ev>:

// default constructor
CentralComputerIF::CentralComputerIF()
{
	/***** Init UART and UART Interrupt *****/
	InitUART(9600,8,1);
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	48 e0       	ldi	r20, 0x08	; 8
 128:	60 e8       	ldi	r22, 0x80	; 128
 12a:	75 e2       	ldi	r23, 0x25	; 37
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	50 d0       	rcall	.+160    	; 0x1d2 <_Z8InitUARTmhh>
	sei();
 132:	78 94       	sei
 134:	08 95       	ret

00000136 <_ZN17CentralComputerIF4sendEjhh>:
} //CentralComputerIF
void CentralComputerIF::send(uint16_t value, uint8_t valid, uint8_t request)
{
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	c6 2f       	mov	r28, r22
 13e:	87 2f       	mov	r24, r23
 140:	14 2f       	mov	r17, r20
 142:	d2 2f       	mov	r29, r18
	
	SendChar(value >> 8); //Data MSB
 144:	b0 d0       	rcall	.+352    	; 0x2a6 <_Z8SendCharc>
	SendChar(value & 0xFF); //Data LSB
 146:	8c 2f       	mov	r24, r28
 148:	ae d0       	rcall	.+348    	; 0x2a6 <_Z8SendCharc>
	SendChar(valid ? 0xFF : 0x00); //Control
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	11 11       	cpse	r17, r1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <_ZN17CentralComputerIF4sendEjhh+0x1c>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	81 95       	neg	r24
 154:	a8 d0       	rcall	.+336    	; 0x2a6 <_Z8SendCharc>
	SendChar((value+request) & 0xFF); //Checksum
 156:	8c 2f       	mov	r24, r28
 158:	8d 0f       	add	r24, r29
 15a:	a5 d0       	rcall	.+330    	; 0x2a6 <_Z8SendCharc>
 15c:	df 91       	pop	r29
	return; 
}
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	08 95       	ret

00000164 <main>:
 164:	cf 93       	push	r28
#include <util/delay.h>



int main(void)
{
 166:	df 93       	push	r29
 168:	1f 92       	push	r1
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	CentralComputerIF CCIF;
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	d8 df       	rcall	.-80     	; 0x124 <_ZN17CentralComputerIFC1Ev>
	//ADCBlokIF ADCBlok;
	//SensorController SC(&ADCBlok, &CCIF); 
	
	DDRB = 0xFF;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	84 b9       	out	0x04, r24	; 4
	
	for(uint16_t i = 0; i < 0xFFFF ; i++){
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	10 e0       	ldi	r17, 0x00	; 0
		PORTB = i; 
 17c:	05 b9       	out	0x05, r16	; 5
		CCIF.send(i,(i%2),(i%4));
 17e:	20 2f       	mov	r18, r16
 180:	23 70       	andi	r18, 0x03	; 3
 182:	40 2f       	mov	r20, r16
 184:	41 70       	andi	r20, 0x01	; 1
 186:	b8 01       	movw	r22, r16
 188:	ce 01       	movw	r24, r28
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	d4 df       	rcall	.-88     	; 0x136 <_ZN17CentralComputerIF4sendEjhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x2c>
 194:	00 00       	nop
	//ADCBlokIF ADCBlok;
	//SensorController SC(&ADCBlok, &CCIF); 
	
	DDRB = 0xFF;
	
	for(uint16_t i = 0; i < 0xFFFF ; i++){
 196:	0f 5f       	subi	r16, 0xFF	; 255
 198:	1f 4f       	sbci	r17, 0xFF	; 255
 19a:	0f 3f       	cpi	r16, 0xFF	; 255
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	18 07       	cpc	r17, r24
 1a0:	69 f7       	brne	.-38     	; 0x17c <main+0x18>
		CCIF.send(i,(i%2),(i%4));
		_delay_us(1);
	}
	volatile int i;
	while(1){
		SendString("DONE");
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	87 d0       	rcall	.+270    	; 0x2b6 <_Z10SendStringPc>
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <main+0x3e>

000001aa <__vector_51>:
SensorController::~SensorController()
{
} //~SensorController

ISR(USART2_RX_vect)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
	ReceivedSem = 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 1c0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <_Z8InitUARTmhh>:
  // Wait for new character received
  while ( !(UCSR2A & (1<<RXC2)) )
  {}
  // Then return it
  return UDR2;
}
 1d2:	cf 92       	push	r12
 1d4:	df 92       	push	r13
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	12 2f       	mov	r17, r18
 1e2:	6b 01       	movw	r12, r22
 1e4:	7c 01       	movw	r14, r24
 1e6:	2c e2       	ldi	r18, 0x2C	; 44
 1e8:	c2 1a       	sub	r12, r18
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	d2 0a       	sbc	r13, r18
 1ee:	e1 08       	sbc	r14, r1
 1f0:	f1 08       	sbc	r15, r1
 1f2:	25 ed       	ldi	r18, 0xD5	; 213
 1f4:	c2 16       	cp	r12, r18
 1f6:	20 ec       	ldi	r18, 0xC0	; 192
 1f8:	d2 06       	cpc	r13, r18
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	e2 06       	cpc	r14, r18
 1fe:	f1 04       	cpc	r15, r1
 200:	08 f0       	brcs	.+2      	; 0x204 <_Z8InitUARTmhh+0x32>
 202:	49 c0       	rjmp	.+146    	; 0x296 <_Z8InitUARTmhh+0xc4>
 204:	45 50       	subi	r20, 0x05	; 5
 206:	44 30       	cpi	r20, 0x04	; 4
 208:	08 f0       	brcs	.+2      	; 0x20c <_Z8InitUARTmhh+0x3a>
 20a:	45 c0       	rjmp	.+138    	; 0x296 <_Z8InitUARTmhh+0xc4>
 20c:	20 e2       	ldi	r18, 0x20	; 32
 20e:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 212:	c1 ed       	ldi	r28, 0xD1	; 209
 214:	d0 e0       	ldi	r29, 0x00	; 0
 216:	28 e1       	ldi	r18, 0x18	; 24
 218:	28 83       	st	Y, r18
 21a:	44 0f       	add	r20, r20
 21c:	40 93 d2 00 	sts	0x00D2, r20	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
 220:	6b 01       	movw	r12, r22
 222:	7c 01       	movw	r14, r24
 224:	20 e8       	ldi	r18, 0x80	; 128
 226:	c2 0e       	add	r12, r18
 228:	24 e8       	ldi	r18, 0x84	; 132
 22a:	d2 1e       	adc	r13, r18
 22c:	2e e1       	ldi	r18, 0x1E	; 30
 22e:	e2 1e       	adc	r14, r18
 230:	f1 1c       	adc	r15, r1
 232:	cc 0c       	add	r12, r12
 234:	dd 1c       	adc	r13, r13
 236:	ee 1c       	adc	r14, r14
 238:	ff 1c       	adc	r15, r15
 23a:	cc 0c       	add	r12, r12
 23c:	dd 1c       	adc	r13, r13
 23e:	ee 1c       	adc	r14, r14
 240:	ff 1c       	adc	r15, r15
 242:	cc 0c       	add	r12, r12
 244:	dd 1c       	adc	r13, r13
 246:	ee 1c       	adc	r14, r14
 248:	ff 1c       	adc	r15, r15
 24a:	dc 01       	movw	r26, r24
 24c:	cb 01       	movw	r24, r22
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	aa 1f       	adc	r26, r26
 254:	bb 1f       	adc	r27, r27
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	aa 1f       	adc	r26, r26
 25c:	bb 1f       	adc	r27, r27
 25e:	9c 01       	movw	r18, r24
 260:	ad 01       	movw	r20, r26
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	44 1f       	adc	r20, r20
 268:	55 1f       	adc	r21, r21
 26a:	22 0f       	add	r18, r18
 26c:	33 1f       	adc	r19, r19
 26e:	44 1f       	adc	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	2d d0       	rcall	.+90     	; 0x2d2 <__udivmodsi4>
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	31 09       	sbc	r19, r1
 27c:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 280:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
 284:	88 81       	ld	r24, Y
 286:	11 23       	and	r17, r17
 288:	11 f0       	breq	.+4      	; 0x28e <_Z8InitUARTmhh+0xbc>
 28a:	90 e8       	ldi	r25, 0x80	; 128
 28c:	01 c0       	rjmp	.+2      	; 0x290 <_Z8InitUARTmhh+0xbe>
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	89 2b       	or	r24, r25
 292:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	08 95       	ret

000002a6 <_Z8SendCharc>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR2A & (1<<UDRE2)) == 0 )
 2a6:	e0 ed       	ldi	r30, 0xD0	; 208
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	90 81       	ld	r25, Z
 2ac:	95 ff       	sbrs	r25, 5
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <_Z8SendCharc+0x4>
  {}
  // Then send the character
  UDR2 = Tegn;
 2b0:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 2b4:	08 95       	ret

000002b6 <_Z10SendStringPc>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
	while (*Streng != 0)
 2bc:	88 81       	ld	r24, Y
 2be:	88 23       	and	r24, r24
 2c0:	29 f0       	breq	.+10     	; 0x2cc <_Z10SendStringPc+0x16>
 2c2:	21 96       	adiw	r28, 0x01	; 1
	{
		SendChar(*Streng);
 2c4:	f0 df       	rcall	.-32     	; 0x2a6 <_Z8SendCharc>
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
	while (*Streng != 0)
 2c6:	89 91       	ld	r24, Y+
 2c8:	81 11       	cpse	r24, r1
 2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <_Z10SendStringPc+0xe>
	{
		SendChar(*Streng);
		Streng++;
	}
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <__udivmodsi4>:
 2d2:	a1 e2       	ldi	r26, 0x21	; 33
 2d4:	1a 2e       	mov	r1, r26
 2d6:	aa 1b       	sub	r26, r26
 2d8:	bb 1b       	sub	r27, r27
 2da:	fd 01       	movw	r30, r26
 2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <__udivmodsi4_ep>

000002de <__udivmodsi4_loop>:
 2de:	aa 1f       	adc	r26, r26
 2e0:	bb 1f       	adc	r27, r27
 2e2:	ee 1f       	adc	r30, r30
 2e4:	ff 1f       	adc	r31, r31
 2e6:	a2 17       	cp	r26, r18
 2e8:	b3 07       	cpc	r27, r19
 2ea:	e4 07       	cpc	r30, r20
 2ec:	f5 07       	cpc	r31, r21
 2ee:	20 f0       	brcs	.+8      	; 0x2f8 <__udivmodsi4_ep>
 2f0:	a2 1b       	sub	r26, r18
 2f2:	b3 0b       	sbc	r27, r19
 2f4:	e4 0b       	sbc	r30, r20
 2f6:	f5 0b       	sbc	r31, r21

000002f8 <__udivmodsi4_ep>:
 2f8:	66 1f       	adc	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	88 1f       	adc	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	1a 94       	dec	r1
 302:	69 f7       	brne	.-38     	; 0x2de <__udivmodsi4_loop>
 304:	60 95       	com	r22
 306:	70 95       	com	r23
 308:	80 95       	com	r24
 30a:	90 95       	com	r25
 30c:	9b 01       	movw	r18, r22
 30e:	ac 01       	movw	r20, r24
 310:	bd 01       	movw	r22, r26
 312:	cf 01       	movw	r24, r30
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
