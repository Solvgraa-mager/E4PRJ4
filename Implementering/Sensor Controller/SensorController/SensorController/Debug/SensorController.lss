
SensorController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001468  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ff8  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000672  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000088a  00000000  00000000  000030ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000049d  00000000  00000000  00003976  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003e13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	28 d0       	rcall	.+80     	; 0x146 <main>
  f6:	d7 c0       	rjmp	.+430    	; 0x2a6 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN17CentralComputerIFC1Ev>:

// default constructor
CentralComputerIF::CentralComputerIF()
{
	/***** Init UART and UART Interrupt *****/
	InitUART(BAUDRATE,WORDLENGTH,1);
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	48 e0       	ldi	r20, 0x08	; 8
  fe:	60 e8       	ldi	r22, 0x80	; 128
 100:	75 e2       	ldi	r23, 0x25	; 37
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	33 c0       	rjmp	.+102    	; 0x16e <_Z8InitUARTmhh>
 108:	08 95       	ret

0000010a <_ZN17CentralComputerIF4sendEjhh>:
} //CentralComputerIF
void CentralComputerIF::send(uint16_t value, uint8_t error, uint8_t request)
{
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	c6 2f       	mov	r28, r22
 112:	87 2f       	mov	r24, r23
 114:	14 2f       	mov	r17, r20
 116:	d2 2f       	mov	r29, r18
	//Data bytes
	SendChar(value >> 8);
 118:	9c d0       	rcall	.+312    	; 0x252 <_Z8SendCharc>
	SendChar(value & 0xFF);
 11a:	8c 2f       	mov	r24, r28
 11c:	9a d0       	rcall	.+308    	; 0x252 <_Z8SendCharc>
	//Kontrol-byte
	SendChar(error ? 0xFF : 0x00);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	11 11       	cpse	r17, r1
 122:	01 c0       	rjmp	.+2      	; 0x126 <_ZN17CentralComputerIF4sendEjhh+0x1c>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	81 95       	neg	r24
 128:	94 d0       	rcall	.+296    	; 0x252 <_Z8SendCharc>
	//Checksum-byte
	SendChar((value+request) & 0xFF);
 12a:	8c 2f       	mov	r24, r28
 12c:	8d 0f       	add	r24, r29
 12e:	91 d0       	rcall	.+290    	; 0x252 <_Z8SendCharc>
 130:	df 91       	pop	r29
}
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	08 95       	ret

00000138 <_ZN17CentralComputerIF10getRequestEv>:
 138:	84 d0       	rcall	.+264    	; 0x242 <_Z8ReadCharv>

int CentralComputerIF::getRequest(){
	return ReadChar();
}
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <_Z11initLEDportv>:
#include <avr/io.h>
#define MAX_LED_NR 7

void initLEDport() //Skal typisk kun bruges én gang ifm opstart af program 
{
	DDRB = 0xFF; 
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	84 b9       	out	0x04, r24	; 4
	PORTB = 0; 
 142:	15 b8       	out	0x05, r1	; 5
 144:	08 95       	ret

00000146 <main>:
#include "Timer.hpp"
#include "ADCBlokIF.hpp"
#include "led.hpp"

int main(void)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	1f 92       	push	r1
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	//DDRB |= 0b11110000;
	//ADCBlokIF ADCBlok;
	CentralComputerIF CC;
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	d2 df       	rcall	.-92     	; 0xfa <_ZN17CentralComputerIFC1Ev>
	//Timer T;
	
	//For test only
	initLEDport();
 156:	f3 df       	rcall	.-26     	; 0x13e <_Z11initLEDportv>
 158:	ce 01       	movw	r24, r28
	
	char request = 0;
    while (1) 
    {
		request = CC.getRequest();
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	ed df       	rcall	.-38     	; 0x138 <_ZN17CentralComputerIF10getRequestEv>
 15e:	28 2f       	mov	r18, r24
		CC.send(0xAAAA,0xFF,request);
 160:	4f ef       	ldi	r20, 0xFF	; 255
 162:	6a ea       	ldi	r22, 0xAA	; 170
 164:	7a ea       	ldi	r23, 0xAA	; 170
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	cf df       	rcall	.-98     	; 0x10a <_ZN17CentralComputerIF4sendEjhh>
 16c:	f5 cf       	rjmp	.-22     	; 0x158 <main+0x12>

0000016e <_Z8InitUARTmhh>:
 16e:	cf 92       	push	r12
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
	return UCSR1A & (1<<7);
}
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	12 2f       	mov	r17, r18
 17e:	6b 01       	movw	r12, r22
 180:	7c 01       	movw	r14, r24
 182:	2c e2       	ldi	r18, 0x2C	; 44
 184:	c2 1a       	sub	r12, r18
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	d2 0a       	sbc	r13, r18
 18a:	e1 08       	sbc	r14, r1
 18c:	f1 08       	sbc	r15, r1
 18e:	25 ed       	ldi	r18, 0xD5	; 213
 190:	c2 16       	cp	r12, r18
 192:	20 ec       	ldi	r18, 0xC0	; 192
 194:	d2 06       	cpc	r13, r18
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	e2 06       	cpc	r14, r18
 19a:	f1 04       	cpc	r15, r1
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <_Z8InitUARTmhh+0x32>
 19e:	49 c0       	rjmp	.+146    	; 0x232 <_Z8InitUARTmhh+0xc4>
 1a0:	45 50       	subi	r20, 0x05	; 5
 1a2:	44 30       	cpi	r20, 0x04	; 4
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <_Z8InitUARTmhh+0x3a>
 1a6:	45 c0       	rjmp	.+138    	; 0x232 <_Z8InitUARTmhh+0xc4>
 1a8:	20 e2       	ldi	r18, 0x20	; 32
 1aa:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 1ae:	c9 ec       	ldi	r28, 0xC9	; 201
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	28 e1       	ldi	r18, 0x18	; 24
 1b4:	28 83       	st	Y, r18
 1b6:	44 0f       	add	r20, r20
 1b8:	40 93 ca 00 	sts	0x00CA, r20	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 1bc:	6b 01       	movw	r12, r22
 1be:	7c 01       	movw	r14, r24
 1c0:	20 e8       	ldi	r18, 0x80	; 128
 1c2:	c2 0e       	add	r12, r18
 1c4:	24 e8       	ldi	r18, 0x84	; 132
 1c6:	d2 1e       	adc	r13, r18
 1c8:	2e e1       	ldi	r18, 0x1E	; 30
 1ca:	e2 1e       	adc	r14, r18
 1cc:	f1 1c       	adc	r15, r1
 1ce:	cc 0c       	add	r12, r12
 1d0:	dd 1c       	adc	r13, r13
 1d2:	ee 1c       	adc	r14, r14
 1d4:	ff 1c       	adc	r15, r15
 1d6:	cc 0c       	add	r12, r12
 1d8:	dd 1c       	adc	r13, r13
 1da:	ee 1c       	adc	r14, r14
 1dc:	ff 1c       	adc	r15, r15
 1de:	cc 0c       	add	r12, r12
 1e0:	dd 1c       	adc	r13, r13
 1e2:	ee 1c       	adc	r14, r14
 1e4:	ff 1c       	adc	r15, r15
 1e6:	dc 01       	movw	r26, r24
 1e8:	cb 01       	movw	r24, r22
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	aa 1f       	adc	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	9c 01       	movw	r18, r24
 1fc:	ad 01       	movw	r20, r26
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	44 1f       	adc	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	44 1f       	adc	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	c7 01       	movw	r24, r14
 210:	b6 01       	movw	r22, r12
 212:	27 d0       	rcall	.+78     	; 0x262 <__udivmodsi4>
 214:	21 50       	subi	r18, 0x01	; 1
 216:	31 09       	sbc	r19, r1
 218:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 21c:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 220:	88 81       	ld	r24, Y
 222:	11 23       	and	r17, r17
 224:	11 f0       	breq	.+4      	; 0x22a <_Z8InitUARTmhh+0xbc>
 226:	90 e8       	ldi	r25, 0x80	; 128
 228:	01 c0       	rjmp	.+2      	; 0x22c <_Z8InitUARTmhh+0xbe>
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	89 2b       	or	r24, r25
 22e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	08 95       	ret

00000242 <_Z8ReadCharv>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSR1A & (1<<7)) == 0 )
 242:	e8 ec       	ldi	r30, 0xC8	; 200
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	88 23       	and	r24, r24
 24a:	ec f7       	brge	.-6      	; 0x246 <_Z8ReadCharv+0x4>
  {}
  // Then return it
  return UDR1;
 24c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
}
 250:	08 95       	ret

00000252 <_Z8SendCharc>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR1A & (1<<5)) == 0 )
 252:	e8 ec       	ldi	r30, 0xC8	; 200
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	90 81       	ld	r25, Z
 258:	95 ff       	sbrs	r25, 5
 25a:	fd cf       	rjmp	.-6      	; 0x256 <_Z8SendCharc+0x4>
  {}
  // Then send the character
  UDR1 = Tegn;
 25c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 260:	08 95       	ret

00000262 <__udivmodsi4>:
 262:	a1 e2       	ldi	r26, 0x21	; 33
 264:	1a 2e       	mov	r1, r26
 266:	aa 1b       	sub	r26, r26
 268:	bb 1b       	sub	r27, r27
 26a:	fd 01       	movw	r30, r26
 26c:	0d c0       	rjmp	.+26     	; 0x288 <__udivmodsi4_ep>

0000026e <__udivmodsi4_loop>:
 26e:	aa 1f       	adc	r26, r26
 270:	bb 1f       	adc	r27, r27
 272:	ee 1f       	adc	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	a2 17       	cp	r26, r18
 278:	b3 07       	cpc	r27, r19
 27a:	e4 07       	cpc	r30, r20
 27c:	f5 07       	cpc	r31, r21
 27e:	20 f0       	brcs	.+8      	; 0x288 <__udivmodsi4_ep>
 280:	a2 1b       	sub	r26, r18
 282:	b3 0b       	sbc	r27, r19
 284:	e4 0b       	sbc	r30, r20
 286:	f5 0b       	sbc	r31, r21

00000288 <__udivmodsi4_ep>:
 288:	66 1f       	adc	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	88 1f       	adc	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	1a 94       	dec	r1
 292:	69 f7       	brne	.-38     	; 0x26e <__udivmodsi4_loop>
 294:	60 95       	com	r22
 296:	70 95       	com	r23
 298:	80 95       	com	r24
 29a:	90 95       	com	r25
 29c:	9b 01       	movw	r18, r22
 29e:	ac 01       	movw	r20, r24
 2a0:	bd 01       	movw	r22, r26
 2a2:	cf 01       	movw	r24, r30
 2a4:	08 95       	ret

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
