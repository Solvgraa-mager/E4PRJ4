
SensorController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a4f  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000133c  00000000  00000000  00001f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000093a  00000000  00000000  0000327f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000025c  00000000  00000000  00003bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a13  00000000  00000000  00003e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000550  00000000  00000000  0000482b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00004d7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	30 d0       	rcall	.+96     	; 0x156 <main>
  f6:	f2 c0       	rjmp	.+484    	; 0x2dc <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN9ADCBlokIFC1Ev>:
#include <AVR/io.h>
#define F_CPU 16000000
#include <util/delay.h>

// default constructor
ADCBlokIF::ADCBlokIF()
  fa:	fc 01       	movw	r30, r24
{
	/****** Init Multiplex *****/
	//Port C as output
	DDRC = 0xFF; 
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	87 b9       	out	0x07, r24	; 7
	PORTC = 0; 
 100:	18 b8       	out	0x08, r1	; 8
	//MultiplexProtokol
	_multiplexProtokol[0] = (1<<0);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
	_multiplexProtokol[1] = (1<<1);
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	81 83       	std	Z+1, r24	; 0x01
	_multiplexProtokol[2] = (1<<2);
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	82 83       	std	Z+2, r24	; 0x02
	_multiplexProtokol[3] = (1<<3);
 10e:	88 e0       	ldi	r24, 0x08	; 8
 110:	83 83       	std	Z+3, r24	; 0x03
	
	/***** Init SPI *****/
	//SCK, MOSI, SS as output 
	DDRB |= (1<<1)|(1<<2)|(1<<0);
 112:	84 b1       	in	r24, 0x04	; 4
 114:	87 60       	ori	r24, 0x07	; 7
 116:	84 b9       	out	0x04, r24	; 4
	//MISO as input
	DDRB &= ~(1<<3);
 118:	23 98       	cbi	0x04, 3	; 4
	//Set as Master
	SPCR |= (1<<MSTR); //Not confirmed
 11a:	8c b5       	in	r24, 0x2c	; 44
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	8c bd       	out	0x2c, r24	; 44
	// Divide clock by 128 
	SPCR |= (1<<SPR0)|(1<<SPR1); //Not confirmed
 120:	8c b5       	in	r24, 0x2c	; 44
 122:	83 60       	ori	r24, 0x03	; 3
 124:	8c bd       	out	0x2c, r24	; 44
	//Enable SPI
	SPCR |= (1<<SPE); //Not confirmed
 126:	8c b5       	in	r24, 0x2c	; 44
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	8c bd       	out	0x2c, r24	; 44
 12c:	08 95       	ret

0000012e <_ZN17CentralComputerIFC1Ev>:

// default constructor
CentralComputerIF::CentralComputerIF()
{
	/***** Init UART and UART Interrupt *****/
	InitUART(BAUDRATE,WORDLENGTH,1);
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	48 e0       	ldi	r20, 0x08	; 8
 132:	60 e8       	ldi	r22, 0x80	; 128
 134:	75 e2       	ldi	r23, 0x25	; 37
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	3c c0       	rjmp	.+120    	; 0x1b4 <_Z8InitUARTmhh>
 13c:	08 95       	ret

0000013e <_ZN17CentralComputerIF4sendEj>:
} //CentralComputerIF
void CentralComputerIF::send(uint16_t value)
{
 13e:	cf 93       	push	r28
 140:	c6 2f       	mov	r28, r22
 142:	87 2f       	mov	r24, r23
	SendChar(value >> 8);
 144:	a1 d0       	rcall	.+322    	; 0x288 <_Z8SendCharc>
	SendChar(value & 0xFF);
 146:	8c 2f       	mov	r24, r28
 148:	9f d0       	rcall	.+318    	; 0x288 <_Z8SendCharc>
}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <_Z11initLEDportv>:
#include <avr/io.h>
#define MAX_LED_NR 7

void initLEDport() //Skal typisk kun bruges én gang ifm opstart af program 
{
	DDRB = 0xFF; 
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	84 b9       	out	0x04, r24	; 4
	PORTB = 0; 
 152:	15 b8       	out	0x05, r1	; 5
 154:	08 95       	ret

00000156 <main>:
#include "Timer.hpp"
#include "ADCBlokIF.hpp"
#include "led.hpp"

int main(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	00 d0       	rcall	.+0      	; 0x15c <main+0x6>
 15c:	00 d0       	rcall	.+0      	; 0x15e <main+0x8>
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
	DDRB |= 0b11110000;
 162:	84 b1       	in	r24, 0x04	; 4
 164:	80 6f       	ori	r24, 0xF0	; 240
 166:	84 b9       	out	0x04, r24	; 4
	ADCBlokIF ADCBlok;
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	c6 df       	rcall	.-116    	; 0xfa <_ZN9ADCBlokIFC1Ev>
	CentralComputerIF CC;
 16e:	ce 01       	movw	r24, r28
 170:	05 96       	adiw	r24, 0x05	; 5
 172:	dd df       	rcall	.-70     	; 0x12e <_ZN17CentralComputerIFC1Ev>
	Timer T;
 174:	ce 01       	movw	r24, r28
 176:	06 96       	adiw	r24, 0x06	; 6
	
	//For test only
	initLEDport();
 178:	0c d0       	rcall	.+24     	; 0x192 <_ZN5TimerC1Ev>
 17a:	e9 df       	rcall	.-46     	; 0x14e <_Z11initLEDportv>
	
    /* Replace with your application code */
    while (1) 
    {
		CC.send(0xFAFA);
 17c:	6a ef       	ldi	r22, 0xFA	; 250
 17e:	7a ef       	ldi	r23, 0xFA	; 250
 180:	ce 01       	movw	r24, r28
 182:	05 96       	adiw	r24, 0x05	; 5
 184:	dc df       	rcall	.-72     	; 0x13e <_ZN17CentralComputerIF4sendEj>
		T.wait(1000);
 186:	68 ee       	ldi	r22, 0xE8	; 232
 188:	73 e0       	ldi	r23, 0x03	; 3
 18a:	ce 01       	movw	r24, r28
 18c:	06 96       	adiw	r24, 0x06	; 6
 18e:	02 d0       	rcall	.+4      	; 0x194 <_ZN5Timer4waitEi>
 190:	f5 cf       	rjmp	.-22     	; 0x17c <main+0x26>

00000192 <_ZN5TimerC1Ev>:
 192:	08 95       	ret

00000194 <_ZN5Timer4waitEi>:
Timer::Timer()
{
} //Timer

void Timer::wait(int timeInMs){
	for(int i = 0 ;i<timeInMs;i++)
 194:	16 16       	cp	r1, r22
 196:	17 06       	cpc	r1, r23
 198:	64 f4       	brge	.+24     	; 0x1b2 <_ZN5Timer4waitEi+0x1e>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	ef e9       	ldi	r30, 0x9F	; 159
 1a0:	ff e0       	ldi	r31, 0x0F	; 15
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <_ZN5Timer4waitEi+0xe>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <_ZN5Timer4waitEi+0x14>
 1a8:	00 00       	nop
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	68 17       	cp	r22, r24
 1ae:	79 07       	cpc	r23, r25
 1b0:	b1 f7       	brne	.-20     	; 0x19e <_ZN5Timer4waitEi+0xa>
 1b2:	08 95       	ret

000001b4 <_Z8InitUARTmhh>:
  // Wait for new character received
  while ( (UCSR1A & (1<<7)) == 0 )
  {}
  // Then return it
  return UDR1;
}
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	12 2f       	mov	r17, r18
 1c4:	6b 01       	movw	r12, r22
 1c6:	7c 01       	movw	r14, r24
 1c8:	2c e2       	ldi	r18, 0x2C	; 44
 1ca:	c2 1a       	sub	r12, r18
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	d2 0a       	sbc	r13, r18
 1d0:	e1 08       	sbc	r14, r1
 1d2:	f1 08       	sbc	r15, r1
 1d4:	25 ed       	ldi	r18, 0xD5	; 213
 1d6:	c2 16       	cp	r12, r18
 1d8:	20 ec       	ldi	r18, 0xC0	; 192
 1da:	d2 06       	cpc	r13, r18
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	e2 06       	cpc	r14, r18
 1e0:	f1 04       	cpc	r15, r1
 1e2:	08 f0       	brcs	.+2      	; 0x1e6 <_Z8InitUARTmhh+0x32>
 1e4:	49 c0       	rjmp	.+146    	; 0x278 <_Z8InitUARTmhh+0xc4>
 1e6:	45 50       	subi	r20, 0x05	; 5
 1e8:	44 30       	cpi	r20, 0x04	; 4
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <_Z8InitUARTmhh+0x3a>
 1ec:	45 c0       	rjmp	.+138    	; 0x278 <_Z8InitUARTmhh+0xc4>
 1ee:	20 e2       	ldi	r18, 0x20	; 32
 1f0:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 1f4:	c9 ec       	ldi	r28, 0xC9	; 201
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	28 e1       	ldi	r18, 0x18	; 24
 1fa:	28 83       	st	Y, r18
 1fc:	44 0f       	add	r20, r20
 1fe:	40 93 ca 00 	sts	0x00CA, r20	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
 202:	6b 01       	movw	r12, r22
 204:	7c 01       	movw	r14, r24
 206:	20 e8       	ldi	r18, 0x80	; 128
 208:	c2 0e       	add	r12, r18
 20a:	24 e8       	ldi	r18, 0x84	; 132
 20c:	d2 1e       	adc	r13, r18
 20e:	2e e1       	ldi	r18, 0x1E	; 30
 210:	e2 1e       	adc	r14, r18
 212:	f1 1c       	adc	r15, r1
 214:	cc 0c       	add	r12, r12
 216:	dd 1c       	adc	r13, r13
 218:	ee 1c       	adc	r14, r14
 21a:	ff 1c       	adc	r15, r15
 21c:	cc 0c       	add	r12, r12
 21e:	dd 1c       	adc	r13, r13
 220:	ee 1c       	adc	r14, r14
 222:	ff 1c       	adc	r15, r15
 224:	cc 0c       	add	r12, r12
 226:	dd 1c       	adc	r13, r13
 228:	ee 1c       	adc	r14, r14
 22a:	ff 1c       	adc	r15, r15
 22c:	dc 01       	movw	r26, r24
 22e:	cb 01       	movw	r24, r22
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	aa 1f       	adc	r26, r26
 236:	bb 1f       	adc	r27, r27
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	aa 1f       	adc	r26, r26
 23e:	bb 1f       	adc	r27, r27
 240:	9c 01       	movw	r18, r24
 242:	ad 01       	movw	r20, r26
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	44 1f       	adc	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	44 1f       	adc	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	1f d0       	rcall	.+62     	; 0x298 <__udivmodsi4>
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	31 09       	sbc	r19, r1
 25e:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 262:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 266:	88 81       	ld	r24, Y
 268:	11 23       	and	r17, r17
 26a:	11 f0       	breq	.+4      	; 0x270 <_Z8InitUARTmhh+0xbc>
 26c:	90 e8       	ldi	r25, 0x80	; 128
 26e:	01 c0       	rjmp	.+2      	; 0x272 <_Z8InitUARTmhh+0xbe>
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	89 2b       	or	r24, r25
 274:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	08 95       	ret

00000288 <_Z8SendCharc>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR1A & (1<<5)) == 0 )
 288:	e8 ec       	ldi	r30, 0xC8	; 200
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	90 81       	ld	r25, Z
 28e:	95 ff       	sbrs	r25, 5
 290:	fd cf       	rjmp	.-6      	; 0x28c <_Z8SendCharc+0x4>
  {}
  // Then send the character
  UDR1 = Tegn;
 292:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 296:	08 95       	ret

00000298 <__udivmodsi4>:
 298:	a1 e2       	ldi	r26, 0x21	; 33
 29a:	1a 2e       	mov	r1, r26
 29c:	aa 1b       	sub	r26, r26
 29e:	bb 1b       	sub	r27, r27
 2a0:	fd 01       	movw	r30, r26
 2a2:	0d c0       	rjmp	.+26     	; 0x2be <__udivmodsi4_ep>

000002a4 <__udivmodsi4_loop>:
 2a4:	aa 1f       	adc	r26, r26
 2a6:	bb 1f       	adc	r27, r27
 2a8:	ee 1f       	adc	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	a2 17       	cp	r26, r18
 2ae:	b3 07       	cpc	r27, r19
 2b0:	e4 07       	cpc	r30, r20
 2b2:	f5 07       	cpc	r31, r21
 2b4:	20 f0       	brcs	.+8      	; 0x2be <__udivmodsi4_ep>
 2b6:	a2 1b       	sub	r26, r18
 2b8:	b3 0b       	sbc	r27, r19
 2ba:	e4 0b       	sbc	r30, r20
 2bc:	f5 0b       	sbc	r31, r21

000002be <__udivmodsi4_ep>:
 2be:	66 1f       	adc	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	88 1f       	adc	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	1a 94       	dec	r1
 2c8:	69 f7       	brne	.-38     	; 0x2a4 <__udivmodsi4_loop>
 2ca:	60 95       	com	r22
 2cc:	70 95       	com	r23
 2ce:	80 95       	com	r24
 2d0:	90 95       	com	r25
 2d2:	9b 01       	movw	r18, r22
 2d4:	ac 01       	movw	r20, r24
 2d6:	bd 01       	movw	r22, r26
 2d8:	cf 01       	movw	r24, r30
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
