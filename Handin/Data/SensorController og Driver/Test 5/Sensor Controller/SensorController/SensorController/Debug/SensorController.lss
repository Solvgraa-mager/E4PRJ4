
SensorController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  0000049e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c4e  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013ac  00000000  00000000  0000227e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a2  00000000  00000000  0000362a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af0  00000000  00000000  00004208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072e  00000000  00000000  00004cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00005426  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	fc c0       	rjmp	.+504    	; 0x2c6 <__vector_51>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	79 d0       	rcall	.+242    	; 0x1f8 <main>
 106:	8f c1       	rjmp	.+798    	; 0x426 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_ZN9ADCBlokIFC1Ev>:
ADCBlokIF::ADCBlokIF()
{
	/***** Init SPI *****/
	//MSB First 
	//SCK, MOSI, SS as output 
	DDRB |= (1<<1)|(1<<2)|(1<<0);
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	87 60       	ori	r24, 0x07	; 7
 10e:	84 b9       	out	0x04, r24	; 4
	//MISO as input
	DDRB &= ~(1<<3);
 110:	23 98       	cbi	0x04, 3	; 4
	//SS high
	PORTB |= 1<<0;
 112:	28 9a       	sbi	0x05, 0	; 5
	//Set as Master
	SPCR |= (1<<MSTR); //Not confirmed
 114:	8c b5       	in	r24, 0x2c	; 44
 116:	80 61       	ori	r24, 0x10	; 16
 118:	8c bd       	out	0x2c, r24	; 44
	// Divide clock by 128 = 125KHz
	SPCR |= (1<<SPR0)|(1<<SPR1); //Not confirmed
 11a:	8c b5       	in	r24, 0x2c	; 44
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	8c bd       	out	0x2c, r24	; 44
	//Enable SPI
	SPCR |= (1<<SPE); //Not confirmed
 120:	8c b5       	in	r24, 0x2c	; 44
 122:	80 64       	ori	r24, 0x40	; 64
 124:	8c bd       	out	0x2c, r24	; 44
 126:	08 95       	ret

00000128 <_ZN9ADCBlokIF3SPIEh>:
	return ((answer[1]) << 8 | (answer[2]));  
}

uint8_t ADCBlokIF::SPI(uint8_t temp){
	
	SPDR = temp; 
 128:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
 12a:	0d b4       	in	r0, 0x2d	; 45
 12c:	07 fe       	sbrs	r0, 7
 12e:	fd cf       	rjmp	.-6      	; 0x12a <_ZN9ADCBlokIF3SPIEh+0x2>
	return SPDR;
 130:	8e b5       	in	r24, 0x2e	; 46
}
 132:	08 95       	ret

00000134 <_ZN9ADCBlokIF4readEi>:
	//Enable SPI
	SPCR |= (1<<SPE); //Not confirmed
		
} //ADCBlokIF

uint16_t ADCBlokIF::read(int channel){
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	//Check channel is between 0 and 4
	if ((channel > 4) || (channel < 0)) return -1;
 13c:	65 30       	cpi	r22, 0x05	; 5
 13e:	71 05       	cpc	r23, r1
 140:	f0 f4       	brcc	.+60     	; 0x17e <_ZN9ADCBlokIF4readEi+0x4a>
 142:	eb 01       	movw	r28, r22
 144:	8c 01       	movw	r16, r24
	uint8_t request[3] = {0};
	uint8_t answer[3] = {0};
	request[0] |= (1 << 1) | (1 << 2);
	request[1] |= (channel << 6);
	request[2] = 0xFF;
	PORTB &= ~(0b1); //SS low
 146:	28 98       	cbi	0x05, 0	; 5
	answer[0] = SPI(request[0]);
 148:	66 e0       	ldi	r22, 0x06	; 6
 14a:	ee df       	rcall	.-36     	; 0x128 <_ZN9ADCBlokIF3SPIEh>
	answer[1] = SPI(request[1]);
 14c:	be 01       	movw	r22, r28
 14e:	00 24       	eor	r0, r0
 150:	76 95       	lsr	r23
 152:	67 95       	ror	r22
 154:	07 94       	ror	r0
 156:	76 95       	lsr	r23
 158:	67 95       	ror	r22
 15a:	07 94       	ror	r0
 15c:	76 2f       	mov	r23, r22
 15e:	60 2d       	mov	r22, r0
 160:	c8 01       	movw	r24, r16
 162:	e2 df       	rcall	.-60     	; 0x128 <_ZN9ADCBlokIF3SPIEh>
 164:	c8 2f       	mov	r28, r24
	answer[2] = SPI(request[2]);
 166:	6f ef       	ldi	r22, 0xFF	; 255
 168:	c8 01       	movw	r24, r16
 16a:	de df       	rcall	.-68     	; 0x128 <_ZN9ADCBlokIF3SPIEh>
	PORTB |= 0b1; //SS high
 16c:	28 9a       	sbi	0x05, 0	; 5
	return ((answer[1]) << 8 | (answer[2]));  
 16e:	2c 2f       	mov	r18, r28
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	32 2f       	mov	r19, r18
 174:	22 27       	eor	r18, r18
 176:	a9 01       	movw	r20, r18
 178:	48 2b       	or	r20, r24
 17a:	ca 01       	movw	r24, r20
 17c:	02 c0       	rjmp	.+4      	; 0x182 <_ZN9ADCBlokIF4readEi+0x4e>
		
} //ADCBlokIF

uint16_t ADCBlokIF::read(int channel){
	//Check channel is between 0 and 4
	if ((channel > 4) || (channel < 0)) return -1;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	9f ef       	ldi	r25, 0xFF	; 255
	answer[0] = SPI(request[0]);
	answer[1] = SPI(request[1]);
	answer[2] = SPI(request[2]);
	PORTB |= 0b1; //SS high
	return ((answer[1]) << 8 | (answer[2]));  
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <_ZN9ADCBlokIFD1Ev>:
	while(!(SPSR & (1<<SPIF)));
	return SPDR;
}

// default destructor
ADCBlokIF::~ADCBlokIF()
 18c:	08 95       	ret

0000018e <_ZN17CentralComputerIFC1Ev>:

// default constructor
CentralComputerIF::CentralComputerIF()
{
	/***** Init UART and UART Interrupt *****/
	InitUART(9600,8,1);
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	48 e0       	ldi	r20, 0x08	; 8
 192:	60 e8       	ldi	r22, 0x80	; 128
 194:	75 e2       	ldi	r23, 0x25	; 37
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	a9 d0       	rcall	.+338    	; 0x2ee <_Z8InitUARTmhh>
	sei();
 19c:	78 94       	sei
 19e:	08 95       	ret

000001a0 <_ZN17CentralComputerIF4sendEjhh>:
} //CentralComputerIF
void CentralComputerIF::send(uint16_t value, uint8_t valid, uint8_t request)
{
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	c6 2f       	mov	r28, r22
 1a8:	87 2f       	mov	r24, r23
 1aa:	14 2f       	mov	r17, r20
 1ac:	d2 2f       	mov	r29, r18
	
	SendChar(value >> 8); //Data MSB
 1ae:	11 d1       	rcall	.+546    	; 0x3d2 <_Z8SendCharc>
	SendChar(value & 0xFF); //Data LSB
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0f d1       	rcall	.+542    	; 0x3d2 <_Z8SendCharc>
	SendChar(valid ? 0xFF : 0x00); //Control
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	11 11       	cpse	r17, r1
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <_ZN17CentralComputerIF4sendEjhh+0x1c>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	81 95       	neg	r24
 1be:	09 d1       	rcall	.+530    	; 0x3d2 <_Z8SendCharc>
	SendChar((value+request) & 0xFF); //Checksum
 1c0:	8c 2f       	mov	r24, r28
 1c2:	8d 0f       	add	r24, r29
 1c4:	06 d1       	rcall	.+524    	; 0x3d2 <_Z8SendCharc>
 1c6:	df 91       	pop	r29
	return; 
}
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	08 95       	ret

000001ce <_ZN17CentralComputerIF10getRequestEv>:
 1ce:	f9 d0       	rcall	.+498    	; 0x3c2 <_Z8ReadCharv>

int CentralComputerIF::getRequest(){
	char requestRaw = 0, requestDecoded = 0; 
	requestRaw = ReadChar();
	
	if(requestRaw == 0b00000001)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	41 f0       	breq	.+16     	; 0x1e4 <_ZN17CentralComputerIF10getRequestEv+0x16>
		requestDecoded = 0; 
	else if(requestRaw == 0b00000010)
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <_ZN17CentralComputerIF10getRequestEv+0x1a>
		requestDecoded = 1; 
	else if(requestRaw == 0b00000100)
 1d8:	84 30       	cpi	r24, 0x04	; 4
 1da:	41 f0       	breq	.+16     	; 0x1ec <_ZN17CentralComputerIF10getRequestEv+0x1e>
		requestDecoded = 2; 
	else if(requestRaw == 0b00001000)
 1dc:	88 30       	cpi	r24, 0x08	; 8
 1de:	41 f0       	breq	.+16     	; 0x1f0 <_ZN17CentralComputerIF10getRequestEv+0x22>
		requestDecoded = 3;
	else 
		requestDecoded = 255;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <_ZN17CentralComputerIF10getRequestEv+0x24>
int CentralComputerIF::getRequest(){
	char requestRaw = 0, requestDecoded = 0; 
	requestRaw = ReadChar();
	
	if(requestRaw == 0b00000001)
		requestDecoded = 0; 
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <_ZN17CentralComputerIF10getRequestEv+0x24>
	else if(requestRaw == 0b00000010)
		requestDecoded = 1; 
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <_ZN17CentralComputerIF10getRequestEv+0x24>
	else if(requestRaw == 0b00000100)
		requestDecoded = 2; 
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <_ZN17CentralComputerIF10getRequestEv+0x24>
	else if(requestRaw == 0b00001000)
		requestDecoded = 3;
 1f0:	83 e0       	ldi	r24, 0x03	; 3
	else 
		requestDecoded = 255;
		
	return requestDecoded;
}
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <_ZN17CentralComputerIFD1Ev>:

// default destructor
CentralComputerIF::~CentralComputerIF()
 1f6:	08 95       	ret

000001f8 <main>:
#include "uart_int.hpp"



int main(void)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	29 97       	sbiw	r28, 0x09	; 9
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
	CentralComputerIF CCIF;
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	be df       	rcall	.-132    	; 0x18e <_ZN17CentralComputerIFC1Ev>
	ADCBlokIF ADCBlok;
 212:	ce 01       	movw	r24, r28
 214:	02 96       	adiw	r24, 0x02	; 2
 216:	79 df       	rcall	.-270    	; 0x10a <_ZN9ADCBlokIFC1Ev>
	SensorController SC(&ADCBlok, &CCIF); 
 218:	ae 01       	movw	r20, r28
 21a:	4f 5f       	subi	r20, 0xFF	; 255
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	be 01       	movw	r22, r28
 220:	6e 5f       	subi	r22, 0xFE	; 254
 222:	7f 4f       	sbci	r23, 0xFF	; 255
 224:	ce 01       	movw	r24, r28
 226:	06 96       	adiw	r24, 0x06	; 6
 228:	18 d0       	rcall	.+48     	; 0x25a <_ZN16SensorControllerC1EP9ADCBlokIFP17CentralComputerIF>
	DDRD |= 0b1;
	SC.Run();
 22a:	50 9a       	sbi	0x0a, 0	; 10
 22c:	ce 01       	movw	r24, r28
 22e:	06 96       	adiw	r24, 0x06	; 6

int main(void)
{
	CentralComputerIF CCIF;
	ADCBlokIF ADCBlok;
	SensorController SC(&ADCBlok, &CCIF); 
 230:	24 d0       	rcall	.+72     	; 0x27a <_ZN16SensorController3RunEv>
 232:	ce 01       	movw	r24, r28
 234:	06 96       	adiw	r24, 0x06	; 6


int main(void)
{
	CentralComputerIF CCIF;
	ADCBlokIF ADCBlok;
 236:	46 d0       	rcall	.+140    	; 0x2c4 <_ZN16SensorControllerD1Ev>
 238:	ce 01       	movw	r24, r28
 23a:	02 96       	adiw	r24, 0x02	; 2



int main(void)
{
	CentralComputerIF CCIF;
 23c:	a7 df       	rcall	.-178    	; 0x18c <_ZN9ADCBlokIFD1Ev>
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	d9 df       	rcall	.-78     	; 0x1f6 <_ZN17CentralComputerIFD1Ev>
	ADCBlokIF ADCBlok;
	SensorController SC(&ADCBlok, &CCIF); 
	DDRD |= 0b1;
	SC.Run();
}
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	29 96       	adiw	r28, 0x09	; 9
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <_ZN16SensorControllerC1EP9ADCBlokIFP17CentralComputerIF>:
int ReceivedSem = 0; 

// default constructor
SensorController::SensorController(ADCBlokIF *ADCBlok, CentralComputerIF *CC)
{
	ADCBlok_ = ADCBlok;
 25a:	fc 01       	movw	r30, r24
 25c:	71 83       	std	Z+1, r23	; 0x01
 25e:	60 83       	st	Z, r22
	CC_ = CC; 
 260:	53 83       	std	Z+3, r21	; 0x03
 262:	42 83       	std	Z+2, r20	; 0x02
 264:	08 95       	ret

00000266 <_ZN16SensorController5SleepEv>:
		Sleep();
	}
}

void SensorController::Sleep(){
	cli();
 266:	f8 94       	cli
	sleep_enable();
 268:	83 b7       	in	r24, 0x33	; 51
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	83 bf       	out	0x33, r24	; 51
	sei();
 26e:	78 94       	sei
	sleep_cpu();
 270:	88 95       	sleep
	sleep_disable();
 272:	83 b7       	in	r24, 0x33	; 51
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	83 bf       	out	0x33, r24	; 51
 278:	08 95       	ret

0000027a <_ZN16SensorController3RunEv>:
{
	ADCBlok_ = ADCBlok;
	CC_ = CC; 
}

void SensorController::Run(){
 27a:	ec 01       	movw	r28, r24
	int request = 0, readValue = 0;
	
	while(1)
	{
		if(ReceivedSem == 1)
 27c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 280:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	d9 f4       	brne	.+54     	; 0x2be <_ZN16SensorController3RunEv+0x44>
		{
			ReceivedSem = 0;
 288:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 28c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
			PORTD |= 0b1;
 290:	58 9a       	sbi	0x0b, 0	; 11
			request = CC_->getRequest();
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	9b 81       	ldd	r25, Y+3	; 0x03
 296:	9b df       	rcall	.-202    	; 0x1ce <_ZN17CentralComputerIF10getRequestEv>
 298:	18 2f       	mov	r17, r24
			
			readValue = ADCBlok_->read(request);
 29a:	68 2f       	mov	r22, r24
 29c:	79 2f       	mov	r23, r25
 29e:	88 81       	ld	r24, Y
 2a0:	99 81       	ldd	r25, Y+1	; 0x01
 2a2:	48 df       	rcall	.-368    	; 0x134 <_ZN9ADCBlokIF4readEi>
			CC_->send(readValue,true,request);
 2a4:	21 2f       	mov	r18, r17
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	bc 01       	movw	r22, r24
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	9b 81       	ldd	r25, Y+3	; 0x03
 2ae:	78 df       	rcall	.-272    	; 0x1a0 <_ZN17CentralComputerIF4sendEjhh>
			PORTD &= ~(0b1);
 2b0:	58 98       	cbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	8f e9       	ldi	r24, 0x9F	; 159
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <_ZN16SensorController3RunEv+0x3c>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <_ZN16SensorController3RunEv+0x42>
			_delay_ms(1);
		}
		//Sleep mode
		Sleep();
 2bc:	00 00       	nop
 2be:	ce 01       	movw	r24, r28
 2c0:	d2 df       	rcall	.-92     	; 0x266 <_ZN16SensorController5SleepEv>
}

void SensorController::Run(){
	int request = 0, readValue = 0;
	
	while(1)
 2c2:	dc cf       	rjmp	.-72     	; 0x27c <_ZN16SensorController3RunEv+0x2>

000002c4 <_ZN16SensorControllerD1Ev>:
	sleep_cpu();
	sleep_disable();
}

// default destructor
SensorController::~SensorController()
 2c4:	08 95       	ret

000002c6 <__vector_51>:
{
} //~SensorController

ISR(USART2_RX_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
	ReceivedSem = 1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2dc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <_Z8InitUARTmhh>:
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
	return UCSR2A & (1<<7);
}
 2ee:	cf 92       	push	r12
 2f0:	df 92       	push	r13
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	12 2f       	mov	r17, r18
 2fe:	6b 01       	movw	r12, r22
 300:	7c 01       	movw	r14, r24
 302:	2c e2       	ldi	r18, 0x2C	; 44
 304:	c2 1a       	sub	r12, r18
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	d2 0a       	sbc	r13, r18
 30a:	e1 08       	sbc	r14, r1
 30c:	f1 08       	sbc	r15, r1
 30e:	25 ed       	ldi	r18, 0xD5	; 213
 310:	c2 16       	cp	r12, r18
 312:	20 ec       	ldi	r18, 0xC0	; 192
 314:	d2 06       	cpc	r13, r18
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	e2 06       	cpc	r14, r18
 31a:	f1 04       	cpc	r15, r1
 31c:	08 f0       	brcs	.+2      	; 0x320 <_Z8InitUARTmhh+0x32>
 31e:	49 c0       	rjmp	.+146    	; 0x3b2 <_Z8InitUARTmhh+0xc4>
 320:	45 50       	subi	r20, 0x05	; 5
 322:	44 30       	cpi	r20, 0x04	; 4
 324:	08 f0       	brcs	.+2      	; 0x328 <_Z8InitUARTmhh+0x3a>
 326:	45 c0       	rjmp	.+138    	; 0x3b2 <_Z8InitUARTmhh+0xc4>
 328:	20 e2       	ldi	r18, 0x20	; 32
 32a:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 32e:	c1 ed       	ldi	r28, 0xD1	; 209
 330:	d0 e0       	ldi	r29, 0x00	; 0
 332:	28 e1       	ldi	r18, 0x18	; 24
 334:	28 83       	st	Y, r18
 336:	44 0f       	add	r20, r20
 338:	40 93 d2 00 	sts	0x00D2, r20	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
 33c:	6b 01       	movw	r12, r22
 33e:	7c 01       	movw	r14, r24
 340:	20 e8       	ldi	r18, 0x80	; 128
 342:	c2 0e       	add	r12, r18
 344:	24 e8       	ldi	r18, 0x84	; 132
 346:	d2 1e       	adc	r13, r18
 348:	2e e1       	ldi	r18, 0x1E	; 30
 34a:	e2 1e       	adc	r14, r18
 34c:	f1 1c       	adc	r15, r1
 34e:	cc 0c       	add	r12, r12
 350:	dd 1c       	adc	r13, r13
 352:	ee 1c       	adc	r14, r14
 354:	ff 1c       	adc	r15, r15
 356:	cc 0c       	add	r12, r12
 358:	dd 1c       	adc	r13, r13
 35a:	ee 1c       	adc	r14, r14
 35c:	ff 1c       	adc	r15, r15
 35e:	cc 0c       	add	r12, r12
 360:	dd 1c       	adc	r13, r13
 362:	ee 1c       	adc	r14, r14
 364:	ff 1c       	adc	r15, r15
 366:	dc 01       	movw	r26, r24
 368:	cb 01       	movw	r24, r22
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	aa 1f       	adc	r26, r26
 370:	bb 1f       	adc	r27, r27
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	9c 01       	movw	r18, r24
 37c:	ad 01       	movw	r20, r26
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	44 1f       	adc	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	44 1f       	adc	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	c7 01       	movw	r24, r14
 390:	b6 01       	movw	r22, r12
 392:	27 d0       	rcall	.+78     	; 0x3e2 <__udivmodsi4>
 394:	21 50       	subi	r18, 0x01	; 1
 396:	31 09       	sbc	r19, r1
 398:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 39c:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
 3a0:	88 81       	ld	r24, Y
 3a2:	11 23       	and	r17, r17
 3a4:	11 f0       	breq	.+4      	; 0x3aa <_Z8InitUARTmhh+0xbc>
 3a6:	90 e8       	ldi	r25, 0x80	; 128
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <_Z8InitUARTmhh+0xbe>
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	89 2b       	or	r24, r25
 3ae:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	ff 90       	pop	r15
 3ba:	ef 90       	pop	r14
 3bc:	df 90       	pop	r13
 3be:	cf 90       	pop	r12
 3c0:	08 95       	ret

000003c2 <_Z8ReadCharv>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( !(UCSR2A & (1<<RXC2)) )
 3c2:	e0 ed       	ldi	r30, 0xD0	; 208
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	88 23       	and	r24, r24
 3ca:	ec f7       	brge	.-6      	; 0x3c6 <_Z8ReadCharv+0x4>
  {}
  // Then return it
  return UDR2;
 3cc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
}
 3d0:	08 95       	ret

000003d2 <_Z8SendCharc>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR2A & (1<<UDRE2)) == 0 )
 3d2:	e0 ed       	ldi	r30, 0xD0	; 208
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	90 81       	ld	r25, Z
 3d8:	95 ff       	sbrs	r25, 5
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <_Z8SendCharc+0x4>
  {}
  // Then send the character
  UDR2 = Tegn;
 3dc:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 3e0:	08 95       	ret

000003e2 <__udivmodsi4>:
 3e2:	a1 e2       	ldi	r26, 0x21	; 33
 3e4:	1a 2e       	mov	r1, r26
 3e6:	aa 1b       	sub	r26, r26
 3e8:	bb 1b       	sub	r27, r27
 3ea:	fd 01       	movw	r30, r26
 3ec:	0d c0       	rjmp	.+26     	; 0x408 <__udivmodsi4_ep>

000003ee <__udivmodsi4_loop>:
 3ee:	aa 1f       	adc	r26, r26
 3f0:	bb 1f       	adc	r27, r27
 3f2:	ee 1f       	adc	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	a2 17       	cp	r26, r18
 3f8:	b3 07       	cpc	r27, r19
 3fa:	e4 07       	cpc	r30, r20
 3fc:	f5 07       	cpc	r31, r21
 3fe:	20 f0       	brcs	.+8      	; 0x408 <__udivmodsi4_ep>
 400:	a2 1b       	sub	r26, r18
 402:	b3 0b       	sbc	r27, r19
 404:	e4 0b       	sbc	r30, r20
 406:	f5 0b       	sbc	r31, r21

00000408 <__udivmodsi4_ep>:
 408:	66 1f       	adc	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	1a 94       	dec	r1
 412:	69 f7       	brne	.-38     	; 0x3ee <__udivmodsi4_loop>
 414:	60 95       	com	r22
 416:	70 95       	com	r23
 418:	80 95       	com	r24
 41a:	90 95       	com	r25
 41c:	9b 01       	movw	r18, r22
 41e:	ac 01       	movw	r20, r24
 420:	bd 01       	movw	r22, r26
 422:	cf 01       	movw	r24, r30
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
